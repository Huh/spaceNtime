30/3600
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)/mn_area
tte_eh
head(tte_eh)%>%as.data.frame()
tte_eh2 <- tte_eh %>% mutate(TTE = TTE*mn_area, censor = censor * mn_area)
tte_eh2 %>% as.data.frame()
# Estimate abundance
tte_estN_fn(tte_eh2, study_area = 1e6)
devtools::load_all(".")
tte_eh <- tte_build_eh(df, deploy, occ, per)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
768/60
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
devtools::load_all(".")
devtools::build_vignettes()
browseVignettes("spaceNtime")
devtools::build_vignettes()
browseVignettes()
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T
)
devtools::load_all(".")
devtools::build_vignettes()
browseVignettes()
browseVignettes("spaceNtime")
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T
)
browseVignettes("spaceNtime")
devtools::load_all(".")
browseVignettes("spaceNtime")
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
?runig
?runif
?sample
# Random sample occasions
occ <- runif(10, study_dates[1], study_dates[2])
occ
# Random sample occasions
occ <- as.POSIXct(runif(10, study_dates[1], study_dates[2]))
# Random sample occasions
occ <- as.POSIXct(runif(10, study_dates[1], study_dates[2]), tz = "GMT")
library(devtools)
build_vignettes()
devtools::load_all(".")
browseVignettes()
browseVignettes(spaceNtime)
browseVignettes("spaceNtime")
build_vignettes()
devtools::load_all(".")
browseVignettes("spaceNtime")
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
devtools::load_all(".")
devtools::load_all(".")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 4000,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
tictoc::tic("data checks")
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
tictoc::toc()
# Build effort for each cam at each occasion
tictoc::tic("effort")
eff <- effort_fn(deploy_s, occ)
tictoc::toc()
# Calculate the censors
tictoc::tic("calculate censors")
censor <- ste_calc_censor(eff)
tictoc::toc()
# Calculate STE at each occasion
tictoc::tic("calculate STE")
out <- ste_calc_toevent(df_s, occ, eff)   %>%
mutate(censor = censor$censor)
tictoc::toc()
ste_eh <- ste_build_eh(df, deploy, occ)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
devtools::load_all(".")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 4000,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
df<-df_s
tictoc::tic("data checks")
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
tictoc::toc()
# Build effort for each cam at each occasion
tictoc::tic("effort")
eff <- effort_fn(deploy_s, occ)
tictoc::toc()
# Calculate the censors
tictoc::tic("calculate censors")
censor <- ste_calc_censor(eff)
tictoc::toc()
df<-df_s
effort<-eff
#   mutate(date = as.Date(start))
# # distinct(cam, area, date, .keep_all = T)
# t3 <- left_join(t1, t2, by = c("cam", "date")) %>%
#   filter(datetime %within% int)
#
# t3 <- left_join(t2, t1, by = c("cam", "date") ) %>%
#   filter(datetime %within% int) %>%
#   select(occ, cam, count).
# NO! we just need to get the occ number for each photo!!!!
# THEN we add back the camera number.
t1 <- df %>%
filter(count > 0) %>%
distinct(datetime) %>%
mutate(date = as.Date(datetime))
head(t1)
# filter(date < as.Date("2016-01-02"))
t2 <- effort %>%
select(-cam) %>%
distinct(occ_int, .keep_all = T) %>%
mutate(date = as.Date(start))
head(effort)
head(eff)
#   mutate(date = as.Date(start))
# # distinct(cam, area, date, .keep_all = T)
# t3 <- left_join(t1, t2, by = c("cam", "date")) %>%
#   filter(datetime %within% int)
#
# t3 <- left_join(t2, t1, by = c("cam", "date") ) %>%
#   filter(datetime %within% int) %>%
#   select(occ, cam, count).
# NO! we just need to get the occ number for each photo!!!!
# THEN we add back the camera number.
t1 <- df %>%
filter(count > 0) %>%
distinct(datetime) %>%
mutate(date = as.Date(datetime))
# filter(date < as.Date("2016-01-02"))
t2 <- effort %>%
select(-cam) %>%
distinct(int, .keep_all = T) %>%
mutate(date = as.Date(start))
t3 <- full_join(t1, t2, by = "date")
dim(t3)
head(t3)
t3 <- full_join(t1, t2, by = "date") %>%
filter(datetime %within% int)
head(t3, 100)
head(t1)
head(effort)
head(t2)
# filter(date < as.Date("2016-01-02"))
t2 <- effort %>%
select(-cam, -area) %>%
distinct(int, .keep_all = T) %>%
mutate(date = as.Date(start))
head(as.data.frame(t2))
head(as.data.frame(t3))
head(t1)
# What I want to do is:
# Find out if the picture is in ANY occasion
t1$datetime[1]
# What I want to do is:
# Find out if the picture is in ANY occasion
t1$datetime[1] %within% t2$int
# What I want to do is:
# Find out if the picture is in ANY occasion
any(t1$datetime[1] %within% t2$int)
# What I want to do is:
# Find out if the picture is in ANY occasion
for(i in 1:nrow(t1)){
t1$anyin[i] <- any(t1$datetime[i] %within% t2$int)
}
?round
head(t1)
for(i in 1:nrow(t1)){
t1$anyin[i] <- any(t1$datetime[i] %within% t2$int)
}
head(t1)
#   mutate(date = as.Date(start))
# # distinct(cam, area, date, .keep_all = T)
# t3 <- left_join(t1, t2, by = c("cam", "date")) %>%
#   filter(datetime %within% int)
#
# t3 <- left_join(t2, t1, by = c("cam", "date") ) %>%
#   filter(datetime %within% int) %>%
#   select(occ, cam, count).
# NO! we just need to get the occ number for each photo!!!!
# THEN we add back the camera number.
t1 <- df %>%
filter(count > 0) %>%
distinct(datetime) %>%
mutate(date = as.Date(datetime))
head(t1)
round_any(132.1, 10)
plyr::round_any(132.1, 10)
plyr::round_any(132.1, 20)
plyr::round_any(132.1, 20, f = floor)
plyr::round_any(132.1, 11, f = floor)
plyr::round_any(132.1, 11.5, f = floor)
11.5*11
11.5*12
head(effort)
# Try to round and see if that helps
min(effort$start)
samp_freq
head(t1)
t1 %>%
mutate(from0 = datetime - min(effort$start))
samp_freq=30
t1 %>%
mutate(from0 = datetime - min(effort$start),
nearest = plyr:round_any(from0, samp_freq, f = floor))
t1 %>%
mutate(from0 = datetime - min(effort$start),
nearest = plyr::round_any(from0, samp_freq, f = floor))
t1 %>%
mutate(from0 = as.numeric(datetime - min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor))
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start))),
nearest = plyr::round_any(from0, samp_freq, f = floor))
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor))
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest))
?as.POSIXct
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest, origin = "1970-01-01"))
as.numeric(min(effort$start))
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest, origin = min(effort$start)))
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest, origin = min(effort$start), tz = "GMT"))
lubridate::tz(effort$start
)
t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest, origin = min(effort$start), tz = lubridate::tz(effort$start)))
head(t2)
head(t2)
head(effort)
t3 <- t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
)
head(t3)
head(effort)
t3 <- t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("posnear"="start"))
t3 <- t1 %>%
mutate(from0 = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
posnear = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("start" = "posnear"))
head(t2)
head(t3)
count_at_occ <- df %>%
filter(count > 0)
head(count_at_occ)
### begin practice
# Do it with rounding instead of intervals!!!
count_at_occ <- df %>%
filter(count > 0) %>%
# round down to the nearest interval
mutate(timefromfirst = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(from0, samp_freq, f = floor),
nearestpos = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("start" = "nearestpos"))
### begin practice
# Do it with rounding instead of intervals!!!
count_at_occ <- df %>%
filter(count > 0) %>%
# round down to the nearest interval
mutate(timefromfirst = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(timefromfirst, samp_freq, f = floor),
nearestpos = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("start" = "nearestpos"))
# Do it with rounding instead of intervals!!!
count_at_occ
### begin practice
# Do it with rounding instead of intervals!!!
count_at_occ <- df %>%
filter(count > 0) %>%
# round down to the nearest interval
mutate(timefromfirst = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(timefromfirst, samp_freq, f = floor),
nearestpos = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("start" = "nearestpos", "cam"))
# Do it with rounding instead of intervals!!!
count_at_occ
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
head(occ)
tictoc::tic("data checks")
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
tictoc::toc()
# Build effort for each cam at each occasion
tictoc::tic("effort")
eff <- effort_fn(deploy_s, occ)
tictoc::toc()
# Calculate the censors
tictoc::tic("calculate censors")
censor <- ste_calc_censor(eff)
tictoc::toc()
df<-df_s;effort<-eff
### begin practice
# Do it with rounding instead of intervals!!!
count_at_occ <- df %>%
filter(count > 0) %>%
# round down to the nearest interval
mutate(timefromfirst = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(timefromfirst, samp_freq, f = floor),
nearestpos = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
) %>%
left_join(effort, ., by = c("start" = "nearestpos", "cam"))
count_at_occ
count_at_occ%>%select(datetime, timefromfirst, nearest, nearestpos)
count_at_occ%>%select(datetime, timefromfirst, nearest, start)
count_at_occ <- df %>%
filter(count > 0) %>%
# round down to the nearest interval
mutate(timefromfirst = as.numeric(datetime) - as.numeric(min(effort$start)),
nearest = plyr::round_any(timefromfirst, samp_freq, f = floor),
nearestpos = as.POSIXct(nearest,
origin = min(effort$start),
tz = lubridate::tz(effort$start))
)
count_at_occ%>%select(datetime, timefromfirst, nearest, start)
count_at_occ%>%select(datetime, timefromfirst, nearest, nearestpos)
