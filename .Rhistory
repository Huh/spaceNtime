left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
left_join(occ, ., by = "occ")
head(occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
mvt <- 2
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count, area) %>%
left_join(occ, ., by = "occ")
eff
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = "occ")
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>% as.data.frame() %>% head
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>% filter(!is.na(count))
?duplicated
# Find sampling occasions where counts exist
# This captures any count within the occasion. Later, I get rid of 0s and
# take only the first
count_at_occ <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count)
count_at_occ
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n())
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n()) %>%
# Join up our counts
left_join(., count_at_occ, by = c("occ", "cam")) %>%
# Here NAs are pictures that didn't exist. 0s are counts of 0
# count should be NA if area = 0.
# Find the area until the first count, at each occcasion
mutate(STE = cumsum(area))
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n()) %>%
# Join up our counts
left_join(., count_at_occ, by = c("occ", "cam")) %>%
# Here NAs are pictures that didn't exist. 0s are counts of 0
# count should be NA if area = 0.
# Find the area until the first count, at each occcasion
mutate(STE = cumsum(area)) %>%as.data.frame%>%head
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n()) %>%
# Join up our counts
left_join(., count_at_occ, by = c("occ", "cam")) %>%
# Here NAs are pictures that didn't exist. 0s are counts of 0
# count should be NA if area = 0.
# Find the area until the first count, at each occcasion
mutate(STE = cumsum(area)) %>%
# If the area is 0, it's just adding 0 to the STE. That's good.
filter(count > 0) %>%
# Here I'm filtering NAs too, so if a photo doesn't exist, its count is 0
filter(!duplicated(occ))
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n()) %>%
# Join up our counts
left_join(., count_at_occ, by = c("occ", "cam")) %>%
# Here NAs are pictures that didn't exist. 0s are counts of 0
# count should be NA if area = 0.
# Find the area until the first count, at each occcasion
mutate(STE = cumsum(area)) %>%
# If the area is 0, it's just adding 0 to the STE. That's good.
filter(count > 0)
df
occ
occ <- build_occ(occ_freq = 3600 * 10, # seconds between the start of each sampling occasion
occ_length = 3600 * 5, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 5, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
occ
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
eff <- effort_fn(deploy, occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
df
occ
head(eff)
dim(eff)
eff
df %>%
filter(count > 0)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam"))
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(cam, occ, start, end, int, area)
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(cam, occ, start, end, int, area) %>%
arrange(cam, occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
select(cam, occ, datetime, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>% as.data.frame%>%head
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
# Normal, motion-sensor
df <- data.frame(
cam = c(1, 1, 2, 2, 2, 2, 2, 3),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 12:00:06",
"2016-01-02 14:00:00",
"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
df
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 5, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
occ
eff <- effort_fn(deploy, occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%as.data.frame
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ))
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%as.data.frame()
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 5, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
occ
eff <- effort_fn(deploy, occ)
eff
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
df
df %>%
filter(count > 0)
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam")
tail(eff)
effort<-eff
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam")
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
effort <- effort_fn(deploy, occ)
effort
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ))
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
arrange(cam, occ)
effort
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ))
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ))%>%as.data.frame()
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%as.data.frame()
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam"))
# Calculate the censors
# Calculate TTE at each camera at each occasion
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
as.data.frame
deploy
# Calculate the censors
# Calculate TTE at each camera at each occasion
tmp <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ)
# Calculate censor
tmp %>%
mutate(censor = end - start)
# Calculate censor
tmp %>%
mutate(censor = end - start) %>%
as.data.frame %>% head()
# Calculate censor
tmp %>%
mutate(censor = as.numeric(end - start)) %>%
as.data.frame %>% head()
# Calculate censor
tmp %>%
mutate(censor = as.numeric(end) - as.numeric(start)) %>%
as.data.frame %>% head()
# Calculate the censors
# Calculate TTE at each camera at each occasion
tmp <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start)) %>%
as.data.frame %>% head()
tmp
# Calculate the censors
# Calculate TTE at each camera at each occasion
# tmp <-
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start)) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start)) %>%
as.data.frame %>% head()
21600-36000
deploy
# Sampling period length
mean(deploy$area)
200/60
287/3.3
samp_per <- mean(deploy$area)/lps
# Sampling period length
lps <- 2 # length units per second
samp_per <- mean(deploy$area)/lps
samp_per
# Calculate the censors
# Calculate TTE at each camera at each occasion
# tmp <-
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start)) %>%
as.data.frame %>% head()
# Calculate the censors
# Calculate TTE at each camera at each occasion
# tmp <-
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start),
censor = censor/samp_per) %>%
as.data.frame %>% head()
# tte_calc_toevent(df, occ, effort)
tmp <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start),
censor = censor/samp_per)
x<-tmp
dat <- list(toevent = matrix(x$TTE, nrow = length(unique(x$cam))),
censor = x$censor)
dat
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = dat,
control = list(fnscale = -1),
hessian = T)
)
opt
# Estimate of lambda
estlam <- exp(opt$par)
# estlam is average density per m2
estN <- estlam * study_area
estlam
?ste_build_eh
?spaceNtime::ste_build_eh
