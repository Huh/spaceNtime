}
ise
# Build ISE EH
ise <- eff %>%
left_join(., df, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam"))
# What do we do with the NAs?
# timelapse: NA means that camera wasn't on.
# motion sensor: we will assume NA should be 0
if(assume0){
ise <- ise %>%
mutate(count = replace(count, is.na(count), 0))
} else {
ise <- ise %>%
mutate(area = replace(area, is.na(count), 0))
}
ise
assume0=F
# What do we do with the NAs?
# timelapse: NA means that camera wasn't on.
# motion sensor: we will assume NA should be 0
if(assume0){
ise <- ise %>%
mutate(count = replace(count, is.na(count), 0))
} else {
ise <- ise %>%
mutate(area = replace(area, is.na(count), 0))
}
ise
# Build ISE EH
ise <- eff %>%
left_join(., df, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam"))
# What do we do with the NAs?
# timelapse: NA means that camera wasn't on.
# motion sensor: we will assume NA should be 0
if(assume0){
ise <- ise %>%
mutate(count = replace(count, is.na(count), 0))
} else {
ise <- ise %>%
mutate(area = replace(area, is.na(count), 0))
}
ise
ste_eh <- build_ste_eh(df, deploy, occ)
ste_eh
ste_eh
# Build ISE EH
ise <- eff %>%
left_join(., df, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)
build_ise_eh <- function(df, deploy, occ, assume0 = F){
# This is currently for deploy version 2 only
# Assume0 = T if you want to assume no picture = 0 animals
# Assume0 = F if you want to assume no picture = not working.
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # This one doesn't return anything
# I could force a data subset here, but it all hinges on occ.
# If occ is correct, everything else will be.
# Build effort for each cam at each occasion
eff <- effort_fn(deploy, occ)
### All lines until here are same as in STE... think about new fn.
# Build ISE EH
ise <- eff %>%
left_join(., df, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)
# timelapse: NA means that camera wasn't on.
# motion sensor: we will assume NA should be 0
if(assume0){
ise <- ise %>%
mutate(count = replace(count, is.na(count), 0))
} else {
ise <- ise %>%
mutate(area = replace(area, is.na(count), 0))
}
return(ise)
}
ise_eh <- build_ise_eh(df, deploy, occ, assume0 = T)
ise_eh
ste_eh
head(ste_eh)
head(ise_eh)
usethis::use_r("estN_ise_fn.R")
ise_eh
is_est <- ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * study_area)
is_est <- ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * 1e6)
is_est
head(ise_eh)
ise_eh %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
Jai_ni <- ise_eh %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
n_L <- Jai_ni %>%
summarise(n = sum(ni),
L = sum(Jai))
nL
n_L
M <- length(unique(Jai_ni$cam))
L <- n_L$L
n <- n_L$n
Jai <- Jai_ni$Jai
ni <- Jai_ni$ni
varD <- M / L^2 / (M-1) * sum(Jai^2  * (ni/Jai - n/L)^2)
form <- sprintf("~ %f * x1", study_area)
is_eh %>%
mutate(dens_ij = count/area)
ise_eh %>%
mutate(dens_ij = count/area)
ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * study_area)
Jai_ni <- ise_eh %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
n_L <- Jai_ni %>%
summarise(n = sum(ni),
L = sum(Jai))
M <- length(unique(Jai_ni$cam))
L <- n_L$L
n <- n_L$n
Jai <- Jai_ni$Jai
ni <- Jai_ni$ni
varD <- M / L^2 / (M-1) * sum(Jai^2  * (ni/Jai - n/L)^2)
form <- sprintf("~ %f * x1", study_area)
is_est <- ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = deltamethod(as.formula(form), D, varD))
study_area <- 1e6
ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * study_area)
Jai_ni <- ise_eh %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
n_L <- Jai_ni %>%
summarise(n = sum(ni),
L = sum(Jai))
M <- length(unique(Jai_ni$cam))
L <- n_L$L
n <- n_L$n
Jai <- Jai_ni$Jai
ni <- Jai_ni$ni
varD <- M / L^2 / (M-1) * sum(Jai^2  * (ni/Jai - n/L)^2)
form <- sprintf("~ %f * x1", study_area)
is_est <- ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = deltamethod(as.formula(form), D, varD))
ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * study_area)
Jai_ni <- ise_eh %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
n_L <- Jai_ni %>%
summarise(n = sum(ni),
L = sum(Jai))
M <- length(unique(Jai_ni$cam))
L <- n_L$L
n <- n_L$n
Jai <- Jai_ni$Jai
ni <- Jai_ni$ni
varD <- M / L^2 / (M-1) * sum(Jai^2  * (ni/Jai - n/L)^2)
form <- sprintf("~ %f * x1", study_area)
is_est <- ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = msm::deltamethod(as.formula(form), D, varD))
is_est
ise_eh %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) )
ise_eh %>%
mutate(dens_ij = count/area)
ise_eh %>%
mutate(dens_ij = count/area)%>%.$dens_ij
ise_eh %>%
mutate(dens_ij = count/area)%>%head(10)
ise_eh %>%
mutate(dens_ij = count/area)%>%head(15)
# First, get rid of occasions where area = 0
ise_eh2 <- ise_eh %>%
filter(area != 0)
Jai_ni <- ise_eh2 %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
n_L <- Jai_ni %>%
summarise(n = sum(ni),
L = sum(Jai))
M <- length(unique(Jai_ni$cam))
L <- n_L$L
n <- n_L$n
Jai <- Jai_ni$Jai
ni <- Jai_ni$ni
varD <- M / L^2 / (M-1) * sum(Jai^2  * (ni/Jai - n/L)^2)
form <- sprintf("~ %f * x1", study_area)
is_est <- ise_eh2 %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = msm::deltamethod(as.formula(form), D, varD))
is_est
ste_estN_fn(ste_eh, study_area = 1e6)
n_L
Jai_ni
usethis::use_r("log_CI.R")
out <- data.frame(LCI = LCI, UCI = UCI)
ci <- exp( 1.96*sqrt(log(1 + (se/estimate)^2 )))
LCI <- estimate / ci
UCI  <- estimate * ci
out <- data.frame(LCI = LCI, UCI = UCI)
x <- ste_eh
dat <- list(toevent = matrix(x$STE, nrow = 1),
censor = x$censor)
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = dat,
control = list(fnscale = -1),
hessian = T)
)
# Estimate of lambda
estlam <- exp(opt$par)
# estlam is average density per m2
estN <- estlam * study_area
# Delta method for variance
varB <- -1 * MASS::ginv(opt$hessian)
form <- sprintf("~ %f * exp(x1)", study_area)
SE_N <- msm::deltamethod(g = stats::as.formula(form), mean = opt$par, cov = varB, ses = T)
logCI <- function(estimate, se){
ci <- exp( 1.96*sqrt(log(1 + (se/estimate)^2 )))
LCI <- estimate / ci
UCI  <- estimate * ci
out <- data.frame(LCI = LCI, UCI = UCI)
}
logCI(estN, SE_N)
logCI <- function(estimate, se){
ci <- exp( 1.96*sqrt(log(1 + (se/estimate)^2 )))
LCI <- estimate / ci
UCI  <- estimate * ci
out <- data.frame(LCI = LCI, UCI = UCI)
return(out)
}
logCI(estN, SE_N)
logCI <- exp( 1.96*sqrt(log(1 + (SE_N/estN)^2 )))
return(list(estN = estN,
SE_N = SE_N,
LCI = estN / logCI,
UCI  = estN * logCI )
LCI
list(estN = estN,
SE_N = SE_N,
LCI = estN / logCI,
UCI  = estN * logCI )
CI <- logCI(estN, SE_N)
CI <- log_CI(estN, SE_N)
logCI <- function(estimate, se){
ci <- exp( 1.96*sqrt(log(1 + (se/estimate)^2 )))
LCI <- estimate / ci
UCI  <- estimate * ci
out <- data.frame(LCI = LCI, UCI = UCI)
return(out)
}
CI <- logCI(estN, SE_N)
CI
data.frame(N = estN, SE = SE_N) %>%
mutate(logCI(N, SE))
data.frame(N = estN, SE = SE_N)
data.frame(N = estN, SE = SE_N) %>%
bind_cols(logCI(N, SE))
data.frame(N = estN, SE = SE_N) %>%
bind_cols(logCI(estN, SE_N))
CI <- logCI(estN, SE_N)
CI <- logCI(estN, SE_N)
out <- data.frame(
N = estN,
SE = SE_N
) %>%
bind_cols(CI)
out
estN
is_est <- ise_eh2 %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = msm::deltamethod(as.formula(form), D, varD))
is_est
CI <- logCI(ise_est$N, ise_est$SE_N)
ise_est <- ise_eh2 %>%
mutate(dens_ij = count/area) %>%
summarise(D = mean(dens_ij) ) %>%
mutate(N = D * study_area,
varD = varD,
SE_N = msm::deltamethod(as.formula(form), D, varD))
CI <- logCI(ise_est$N, ise_est$SE_N)
out <- ise_est %>%
select(N, SE_N) %>%
bind_rows(CI)
out
out <- ise_est %>%
select(N, SE_N) %>%
bind_cols(CI)
out
# IS
library(dplyr)
devtools::load_all(".")
# What we actually have...
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
devtools::load_all(".")
# What we actually have...
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
df
deploy
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # This one
occ <- build_occ(samp_freq = 3600, # seconds between each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # This one
# Build effort for each cam at each occasion
eff <- effort_fn(deploy, occ)
eff
# Build ISE EH
ise <- eff %>%
left_join(., df, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)
ise
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
ise_eh <- ise_build_eh(df, deploy, occ, assume0 = T)
ise_estN <- ise_estN_fn(
ise_eh,
study_area = 1e6
)
ise_estN
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
ise_eh <- ise_build_eh(df, deploy, occ, assume0 = T)
ise_estN_fn(
ise_eh,
study_area = 1e6
)
# Build effort for each cam at each occasion
eff <- effort_fn(deploy, occ)
# Just requires effort
effort %>%
group_by(occ) %>%
summarise(censor = sum(area))
# Just requires effort
eff %>%
group_by(occ) %>%
summarise(censor = sum(area))
head(eff)
