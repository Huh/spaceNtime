"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
df
validate_df(df)
devtools::load_all(".")
validate_df(df)
?is.POSIXct
is.numeric()
?is.numeric
validate_df(df)
lubridate::is.POSIXct
lubridate::is.POSIXct()
?lubridate::is.POSIXct
devtools::load_all(".")
validate_df(df)
s <- Sys.time()
lubridate::interval((s-10), (s+10))
a <-lubridate::interval((s-10), (s+10))
a+10
(a+10)
as.Date((17498)
as.Date(17498)
lubridate::as.date(17498)
lubridate::as_date(17498)
dt <- s; v <-c(dt, dt + 100, dt + 1000)); int_diff(v)
dt <- s
df
dt
c(dt, dt + 100, dt + 1000)
v <- c(dt, dt + 100, dt + 1000)
int_diff(v)
lubridate::int_diff(v)
a <- lubridate::interval((s-5), (s))
b <- lubridate::int_diff(c((s-4),(s+1),(s+5)))
a
b
#' @param n_int a vector of lubridate::intervals
#'
#' @return a single value, the number of intervals that one_int overlaps
#' @export
#'
#' @examples
#' s <- Sys.time()
#' a <- lubridate::interval((s-5), (s))
#' b <- lubridate::int_diff(c((s-4),(s+1),(s+5)))
#' overl(a, b)
overl <- function(one_int, n_int){
# Finds out if any single interval overlaps multiple intervals
sum(lubridate::int_overlaps(one_int, n_int)) != 1
# non-overlapping intervals will have sum = 1
}
overl(a, b)
deploy
devtools::load_all(".")
find_overlap(deploy)
devtools::load_all(".")
find_overlap(deploy)
devtools::load_all(".")
find_overlap(deploy)
usethis::use_r("overlap.R")
devtools::load_all(".")
validate_deploy(deploy)
deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0)
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(deploy)
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
validate_deploy <- function(deploy){
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
if(length(ov) != 0){
print(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
}
validate_deploy(deploy)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
ov
length(of)
length(ov)
nrows(ov)
nrow(ov)
validate_deploy <- function(deploy){
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
if(nrow(ov) != 0){
print(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
}
validate_deploy(deploy)
validate_deploy <- function(deploy){
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
if(nrow(ov) != 0){
print(ov)
return(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
}
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2015-12-18 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 150, 450)
)
validate_deploy(deploy)
validate_deploy <- function(deploy){
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
if(nrow(ov) != 0){
return(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
}
validate_deploy(deploy)
validate_deploy <- function(deploy){
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
# Make sure rows non-overlapping
ov <- find_overlap(deploy)
if(nrow(ov) != 0){
print(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
}
validate_deploy(deploy)
devtools::load_all(".")
?validate_df
package?dplyr
validate_df
usethis::use_r("build_occ.R")
dplyr::left_join
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
devtools::load_all(".")
validate_start_end(deploy)
devtools::load_all(".")
devtools::load_all(".")
validate_df(df)
validate_df_deploy(df, deploy)
validate_occ(occ)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
occ
usethis::use_r("effort_fn.R")
dd <- list(df = df,
deploy = deploy,
occ = occ)
dd
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., chck_names, add_int)
usethis::use_r("add_int.R")
#' Add interval column
#'
#' @param x a dataframe or tibble with columns "start" and "end"
#'
#' @return a dataframe or tibble
#' @export
#'
#' @examples add_int(deploy)
add_int <- function(x){
x %>%
mutate(int = start %--% end)
}
#' Add interval column
#'
#' @param x a dataframe or tibble with columns "start" and "end"
#'
#' @return a dataframe or tibble
#' @export
#'
#' @examples add_int(deploy)
add_int <- function(x){
x %>%
mutate(int = lubridate::interval(start, end) )
}
add_int(deploy)
c("start", "end") %in% names(deploy)
colnames <- c("start","end")
colnames %in% names(deploy)
all(colnames %in% names(deploy))
usethis::use_r("chck_names")
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., chck_names, add_int)
#'
#' This isn't different from verify, but it's used in map_if in effort_fn
#'
#' @param x a dataframe
#' @param colnames a character vector of column names you want to check exist
#'
#' @return
#' @export
#'
#' @examples
chck_names <- function(x, colnames){
all(colnames %in% names(x))
}
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., chck_names(., c("start", "end")), add_int)
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., ~chck_names(., c("start", "end")), add_int)
dd
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., ~assertr::verify(has_all_names("start", "end")), add_int)
# Create intervals in data
dd <- list(df = df,
deploy = deploy,
occ = occ) %>%
purrr::map_if(., assertr::verify(has_all_names("start", "end")), add_int)
chck_names(occ, c("start", "end))
chck_names(occ, c("start", "end"))
dd
# Create intervals in data
dd <- list(deploy = deploy,
occ = occ) %>%
purrr::map(., add_int)
dd
purrr::map(c(deploy, occ), add_int)
purrr::map(list(deploy, occ), add_int)
# Create intervals in data
dd <- list(deploy = deploy,
occ = occ) %>%
purrr::map(., add_int)
# Create occasions by camera
effort <- build_occ_cam(df, dd$occ, "effort")
# Create occasions by camera
effort <- build_occ_cam(df, dd$occ)
effort
# Combine occ-by-cam and deploy to get area-by-occ-by-cam
effort <- occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))
# Create occasions by camera
occ_by_cam <- build_occ_cam(df, dd$occ)
# Combine occ-by-cam and deploy to get area-by-occ-by-cam
effort <- occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))
lubridate::%within%
lubridate::`%within%``
lubridate::`%within%`
lubridate::`%within%`
# Combine occ-by-cam and deploy to get area-by-occ-by-cam
effort <- occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))
# Create intervals in data
deploy %>%
add_int(.)
# Create intervals in data
dd <- list(deploy = deploy,
occ = occ) %>%
purrr::map(., add_int)
# Create occasions by camera
occ_by_cam <- build_occ_cam(deploy, dd$occ)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam")
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam"))
library(lubridate)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., dd$deploy, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam"))
# Create intervals in deploy
deploy %>%
add_int(.)
occ
deploy
# Create occasions by camera
occ_by_cam <- build_occ_cam(deploy, occ)
occ_by_cam
occ_by_cam %>%
rename(occ_int = int)
devtools::load_all(".")
effort_fn(df, deploy, occ)
effort_fn(df, deploy, occ)%>%filter(area)
effort_fn(df, deploy, occ)%>%select(area)
effort_fn(df, deploy, occ)%>%select(area) %>%print(n=Inf)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2015-12-18 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 150, 450)
)
effort_fn(df, deploy, occ)
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
usethis::use_r("calc_censor")
usethis::use_r("calc_ste")
?duplicated
devtools::load_all(".")
calc_ste(df, occ, effort)
calc_ste(df, occ, eff)
eff <- effort_fn(deploy, occ)
eff
calc_ste(df, occ, eff)
usethis::use_r("build_ste_EH")
usethis::use_r("build_ste_eh.R")
devtools::load_all(".")
?build_ste_eh
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
build_ste_eh(df, deploy, occ, study_area = 1e6)
devtools::load_all(".")
build_ste_eh(df, deploy, occ, study_area = 1e6)
devtools::load_all(".")
build_ste_eh(df, deploy, occ, study_area = 1e6)
devtools::load_all(".")
build_ste_eh(df, deploy, occ, study_area = 1e6)
ste_eh <- build_ste_eh(df, deploy, occ, study_area = 1e6)
calc_ste(df, occ, eff)
eff <- effort_fn(deploy, occ)
eff <- effort_fn(deploy, occ)
calc_ste(df, occ, eff)
devtools::load_all(".")
calc_ste(df, occ, eff)
ste_eh <- build_ste_eh(df, deploy, occ, study_area = 1e6)
ste_eh
ste_estN_fn(ste_eh)
devtools::load_all(".")
ste_eh <- build_ste_eh(df, deploy, occ, study_area = 1e6)
ste_estN_fn(ste_eh)
