"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450, 300)
)
df
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
# Overlapping time intervals
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2015-12-18 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 150, 450)
)
ste_eh <- ste_build_eh(df, deploy, occ)
# Area changes within a sampling occasion
deploy <- data.frame(
cam = c(1, 2, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-02 12:00:04",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-02 12:00:03",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 200, 450, 300)
)
deploy
df
# Normal, motion-sensor
df <- data.frame(
cam = c(1, 1, 2, 2, 2, 2, 2, 3),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 12:00:06",
"2016-01-02 14:00:00",
"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
df
deploy
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
# Create intervals in deploy
deploy <- deploy %>%
add_int(.)
# Create occasions by camera
occ_by_cam <- build_occ_cam(deploy, occ) %>%
add_int(.)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam")
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) )
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area,int,occ_int)
deploy
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area)%>%.$area
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam"))%>% .$area
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))%>%
group_by(occ,cam) %>% filter(n() >1)
occ_by_cam %>%
rename(occ_int = int) %>%
left_join(., deploy, by = "cam") %>%
filter(lubridate::int_overlaps(occ_int, int) ) %>%
select(occ, cam, area) %>%
left_join(occ_by_cam, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0)) %>%
# get rid of duplicate rows (if area changed during occasion)
group_by(occ, cam, start, end, int) %>%
summarise(area = first(area)) %>%
ungroup()
# Area changes within a sampling occasion
deploy <- data.frame(
cam = c(1, 2, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-02 12:00:04",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-02 12:00:03",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 200, 450, 300)
)
df
deploy
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
# df and deploy for timelapse
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:00:00"),
tz = "GMT"),
count = c(0, 1, 0, 0, 2),
area = c(300, 300, 200, 0, 450)
)
deploy <- df %>%
mutate(start = datetime,
end = start) %>%
select(cam, start, end, area)
df
deploy
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
ste_eh
# Area changes within a sampling occasion
deploy <- data.frame(
cam = c(1, 2, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-02 12:00:04",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-02 12:00:03",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 200, 450, 300)
)
# Normal, motion-sensor
df <- data.frame(
cam = c(1, 1, 2, 2, 2, 2, 2, 3),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 12:00:06",
"2016-01-02 14:00:00",
"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
# df and deploy for timelapse
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:00:00"),
tz = "GMT"),
count = c(0, 1, 0, 0, 2),
area = c(300, 300, 200, 0, 450)
)
deploy <- df %>%
mutate(start = datetime,
end = start) %>%
select(cam, start, end, area)
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
ste_estN_fn(ste_eh, study_area = 1e6)
deploy
df
# Normal, motion-sensor
df <- data.frame(
cam = c(1, 1, 2, 2, 2, 2, 2, 3),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 12:00:06",
"2016-01-02 14:00:00",
"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450, 300)
)
df
deploy
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # Thi
devtools::load_all(".")
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # Thi
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
validate_df_deploy(df, deploy) # Thi
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
# Build effort for each cam at each occasion
eff <- effort_fn(deploy_s, occ)
eff
eff %>%
left_join(., df_s, by = "cam")
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int)
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam"))
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam"))%>%.$count
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int)%>%.$area
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int) %>%
mutate(count = replace(count, is.na(count) & area > 0, 0))
eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int) %>%
mutate(count = replace(count, is.na(count) & area > 0, 0))%>%.$count
ise
# Build ISE EH
ise <- eff %>%
left_join(., df_s, by = "cam") %>%
filter(datetime %within% int) %>%
select(occ, cam, count) %>%
left_join(eff, ., by = c("occ", "cam")) %>%
select(-int) %>%
mutate(count = replace(count, is.na(count) & area > 0, 0))
ise
ise_eh <- ise_build_eh(df, deploy, occ, assume0 = T)
head(ise_eh)
ise_estN_fn(
ise_eh,
study_area = 1e6
)
# First, get rid of occasions where area = 0
ise_eh2 <- ise_eh %>%
filter(area != 0)
ise_eh2
Jai_ni <- ise_eh2 %>%
group_by(cam) %>%
summarise(Jai = sum(area),
ni = sum(count))
Jai_ni
ise_estN_fn(
ise_eh,
study_area = 1e6
)
devtools::load_all(".")
`devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T)`
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T)
`devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T)`
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T)
browseVignettes("spaceNtime")
browseVignettes("spaceNtime")
devtools::load_all(".")
browseVignettes("spaceNtime")
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
ise_eh <- ise_build_eh(df, deploy, occ)
ise_estN_fn(
ise_eh,
study_area = 1e6
)
1-.05/2
qnorm(.975)
curve(x/10)
curve(1 - x/10)
curve(dnorm(x))
curve(pnorm(x))
curve(1 -pnorm(x))
c <- 0:%
c <- 05
c <- 0:5
1-ppois(c-1, 1)
1-ppois(1:5-1, 1)
1-ppois((1:5)-1, 1)
1-ppois((0:5)-1, 1)
1-ppois((1:5)-1, 1)
1-ppois((1:10)-1, 1)
curve(1-ppois(x,1))
curve(1-ppois(x,1),0,2)
curve(1-ppois(x,1),0,10)
pgeom(4, .1)
1 - pgeom(4, .1)
1 - pgeom(4, .2)
devtools::install_github("eddelbuettel/rbenchmark")
?system.time
devtools::install_github("collectivemedia/tictoc")
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
