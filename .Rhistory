study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
dat_subset <- mapply(study_subset,
dat_init,
start_col = c("datetime", "start"),
end_col = list(NULL, "end"), # list is key for passing a NULL. can't use c()
study_start = study_dates[1],
study_end = study_dates[2])
# study_dates <- as.POSIXct(c("2015-01-05 00:00:00", "2015-01-07 23:59:59"), tz = "GMT")
# study_dates <- as.POSIXct(c("2016-01-05 00:00:00", "2016-01-07 23:59:59"), tz = "GMT")
# Tests
# study_subset(cam_areas, "start", "end", study_dates[1], study_dates[2])
# study_subset(df, "datetime", end_col = NULL, study_dates[1], study_dates[2])
# 3) Build occasions
dat_subset$occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
# Define effort
dat_subset$effort <- effort(dat_subset$df, dat_subset$cam_areas, dat_subset$occ)
# I think the subset check might go here. Make sure all pieces of dat are subset
# Make your data
dat_ste <- ste_data_fn(dat_subset$df, dat_subset$occ, dat_subset$effort, 1e6)
# Estimate abundance
ste_estN_fn(dat_ste)
devtools::use_vignette()
devtools::use_vignette
?devtools::use_vignette
?usethis::use_vignette
library(tidyverse)
# Dataset
cam_occ_EH <- tibble(cam = rep(c(1,2), each = 3),
step = rep(1:3, 2),
nanimals = c(0, 2, 0, 0, 0, 1),
a = c(901, 891.2, 910.9, 700.6, 651.5, 851.1))
# Create IS encounter history and run model
is_estN_fn <- function(cam_occ_EH, A){
is_est <- cam_occ_EH %>%
mutate(dens_ij = nanimals/a) %>%
summarise(D = mean(dens_ij, na.rm = T) ) %>%
mutate(N = D * A)
return(is_est)
}
is_estN <- is_estN_fn(
cam_occ_EH,
A = 10000
)
is_estN
cam_occ_EH
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
df
cam_areas <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
df
cam_areas
# Rewrite package entirely, for staggered entry
devtools::load_all(".") # Load current package.
library(dplyr)
library(lubridate)
study_subset <- function(x, start_col, end_col, study_start, study_end){
# x is a data.frame with start_col and end_col; study_start and _end are study edges,
# we want to only keep deployments that are within these
if(is.null(end_col)){
x %>%
filter(between(!!as.name(start_col), study_start, study_end))
} else {
x %>%
filter(!!as.name(start_col) <= study_end,
!!as.name(end_col) >= study_start )
}
}
# 2) Build occasions
build_occ <- function(samp_freq, samp_length, study_start, study_end){
# Occasions without camera
data.frame(
start = sampling_start(samp_freq = samp_freq,
date_lim = c(study_start, study_end))
) %>%
mutate(end = start + samp_length,
occ = 1:n()) %>%
select(occ, start, end)
}
# Occasions by camera
build_occ_cam <- function(df, occ, new_elem){
# dat = a list, including $df and $occ
tidyr::crossing(
occ = occ$occ,
cam = cam_areas$cam
) %>%
left_join(., occ, by = "occ")
}
# occ_cam <- build_occ_cam(dat_subset) # Example call
# 2.1) Create lubridate intervals in the data (for later use)
chck_names <- function(x){
"start" %in% names(x) & "end" %in% names(x)
}
add_int <- function(x){
x %>%
mutate(int = start %--% end)
}
# dat_subset %>%
#   purrr::map_if(., chck_names, add_int) # Example call
# 3) Find the area of working cameras at each occasion
# 3.1) Define effort (from deploy) and area (from cam_areas) at each occasion
# combine effort and camera area by occasion
effort <- function(df, cam_areas, occ){
# dat is a list with $df, $cam_areas, and $occ
# Create intervals in data
dd <- list(df = df,
cam_areas = cam_areas,
occ = occ) %>%
purrr::map_if(., chck_names, add_int)
# Create occasions by camera
dd$effort <- build_occ_cam(dd$df, dd$occ, "effort")
# Combine these two
dd$effort <- dd$effort %>%
rename(occ_int = int) %>%
left_join(., dd$cam_areas, by = "cam") %>%
filter(occ_int %within% int) %>%
select(occ, cam, area) %>%
left_join(dd$effort, ., by = c("occ", "cam")) %>%
mutate(area = replace(area, is.na(area), 0))
return(dd$effort)
}
# 3.2) Calculate censor for each time step
calc_censor <- function(effort){
# Just requires effort df
effort %>%
group_by(occ) %>%
summarise(censor = sum(area))
}
# 4) Compute STE on each occasion
ste_data_fn <- function(df, occ, effort, A){
# $df and $effort and $occ from dat
# A is your study area size.
# First, calculate your censors
censor <- calc_censor(effort)
tmp <- df %>%
# Find count at each sampling occasion
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Randomly order the cameras at each occasion
filter(area != 0) %>%
group_by(occ) %>%
sample_n(n()) %>%
# Find the area until the first count, at each occcasion
mutate(STE = cumsum(area)) %>%
filter(count > 0) %>%
filter(!duplicated(occ)) %>%
# Add back NAs on all other sampling occasions
select(occ, STE) %>%
left_join(occ, .) %>%
# Add in our censors
left_join(., censor)
if(all(is.na(tmp$STE))) warning("No animals detected in any sampling occasion")
out <- list(toevent = matrix(tmp$STE, nrow = 1),
censor = tmp$censor,
A = A )
return(out)
}
################################################################################
# Workflow
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
cam_areas <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
# Data checks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# What happens if a start and end in one line are the same?
# What happens if an end of one line and start of next line are the same?
# What happens if an end of one line overlaps the start of the next line?
# What happens if a 0 interval overlaps a 1 interval?
# What happens if these are Dates instead of times?
# deploy <- data.frame(cam = c(1, 2, 2),
#                      start = as.Date(c("2015-12-01", "2016-01-01", "2016-01-02")),
#                      end = as.Date(c("2016-01-05", "2016-01-01", "2016-01-05")),
#                      area = c(300,300,450))
# Workflow
# 1) Put together data in a list
dat_init <- list(df = df, cam_areas = cam_areas)
# 2) Optional... subset your data if you haven't already
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
dat_subset <- mapply(study_subset,
dat_init,
start_col = c("datetime", "start"),
end_col = list(NULL, "end"), # list is key for passing a NULL. can't use c()
study_start = study_dates[1],
study_end = study_dates[2])
# study_dates <- as.POSIXct(c("2015-01-05 00:00:00", "2015-01-07 23:59:59"), tz = "GMT")
# study_dates <- as.POSIXct(c("2016-01-05 00:00:00", "2016-01-07 23:59:59"), tz = "GMT")
# Tests
# study_subset(cam_areas, "start", "end", study_dates[1], study_dates[2])
# study_subset(df, "datetime", end_col = NULL, study_dates[1], study_dates[2])
# 3) Build occasions
dat_subset$occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
# Define effort
dat_subset$effort <- effort(dat_subset$df, dat_subset$cam_areas, dat_subset$occ)
dat_subset$effort
cam_areas
class(dat_subset$effort) <- "ste"
class(dat_subset$effort)
dat_subset$effort
mean
mean.Date()
mean.Date
df
cam_areas
# 3) Build occasions
dat_subset$occ
dat_subset$effort
# Define effort
dat_subset$effort <- effort(dat_subset$df, dat_subset$cam_areas, dat_subset$occ)
head(dat_subset$effort)
# Make your data
dat_ste <- ste_data_fn(dat_subset$df, dat_subset$occ, dat_subset$effort, 1e6)
dat_ste
# Estimate abundance
ste_estN_fn(dat_ste)
usethis::use_r("study_subset.R")
?raster
?raster::raster
?plot
between(1, 0,5)
between(0, 0,5)
between(-1, 0,5)
devtools::load_all(".")
df
d <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-02 23:59:59"), tz = "GMT")
d
study_subset(df, "datetime", NULL, d[1], d[2])
study_subset(df, "datetime", d[1], d[2])
devtools::use_testthat()
usethis::use_testthat()
cam_areas
expect_equal(10,10)
testthat::expect_equal(10,10)
between(5,0,10)
between(5,10,0)
devtools::load_all(".")
usethis::use_r("validate_data")
factor("a","b","c")
factor("a","b","c",levels = 3)
factor(c("a","b","c))
factor(c("a","b","c"))
as.character(factor(c("a","b","c")))
df
# for df
# Do the columns cam, datetime, and count exist?
class(df$datetime)
class(df$count)
df %>%
mutate(datetime = as.POSIXct(datetime))
# for df
# Do the columns cam, datetime, and count exist?
c("cam", "datetime", "count") %in% colnames(df)
cam_areas
factor(c(4,5,6))
sum(factor(c(4,5,6)))
as.numeric(factor(c(4,5,6)))
# Try to force the columns to be the correct class
# Make sure count isn't a factor before I force it
class(df$count) != factor
class(df$count)
# Try to force the columns to be the correct class
# Make sure count isn't a factor before I force it
class(df$count) != "factor"
# Make sure they have the same tz
lubridate::tz(cam_areas$start) == lubridate::tz(cam_areas$end)
# Freak out if a camera in df is not in cam_areas
class(df$cam) == class(cam_areas$cam)
unique(df$cam)
unique(df$cam) %in% cam_areas$cam
if(x) print("yeah")
x <- T
if(x) print("yeah")
x <- F
if(x) print("yeah")
x <- c(F,T)
x
if(x) print("yeah")
class(df$datetime)
class(df$datetime) == "POSIXct"
if(x != y) warning(nope)
if(x != y) print("nope")
x
class(df$datetime)
x <- class(df$datetime)
y <- x[1]
x
y
if(x != y) print("nope")
y <- x[2]
if(x != y) print("nope")
install.packages("validate")
# Data validation step
library(validate)
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
df %>%
check_that(count >= 0) %>%
summary()
library(dplylr)
library(dplyr)
df %>%
check_that(count >= 0) %>%
summary()
install.packages("assertr")
install.packages("assertr")
install.packages("assertr")
df %>%
check_that(count >= 0) %>%
check_that(c("cam", "datetime", "count") %in% colnames(df)) %>%
summary()
# Data validation step
library(validate)
df %>%
check_that(count >= 0) %>%
check_that(c("cam", "datetime", "count") %in% colnames(df)) %>%
summary()
df %>%
check_that(count >= 0) %>%
check_that(c("cam", "datetime", "count") %in% colnames(.)) %>%
summary()
install.packages("assertr")
# Data validation step
library(assertr)
df %>%
verify(has_all_names("cam", "datetime", "count"))
library(dplyr)
df %>%
verify(has_all_names("cam", "datetime", "count"))
class(df)
df
# Date the user needs to feed in
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
df %>%
verify(has_all_names("cam", "datetime", "count"))
df %>%
verify(has_all_names("cam", "datetime", "count", "area"))
df %>%
verify(has_all_names("cam", "datetime", "count")) %>%
verify(!is.factor(count))
df %>%
verify(has_all_names("cam", "datetime", "count")) %>%
verify(!is.factor(count)) %>%
mutate(datetime = as.POSIXct(datetime),
count = as.numeric(count)) %>%
assert(count >= 0)
df %>%
verify(has_all_names("cam", "datetime", "count")) %>%
verify(!is.factor(count)) %>%
mutate(datetime = as.POSIXct(datetime),
count = as.numeric(count)) %>%
verify(count >= 0)
df %>%
verify(has_all_names("cam", "datetime", "count")) %>%
verify(!is.factor(count)) %>%
mutate(datetime = as.POSIXct(datetime),
count = as.numeric(count)) %>%
verify(count >= 1)
df %>%
verify(has_all_names("cam", "datetime", "count")) %>%
verify(!is.factor(count)) %>%
mutate(datetime = as.POSIXct(datetime),
count = as.numeric(count)) %>%
verify(count >= 0)
deploy
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area"))
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Try to force the columns to be the correct class
verify(!is.factor(area)) %>%
mutate(start = as.POSIXct(start),
end = as.POSIXct(end),
area = as.numeric(area)) %>%
verify(area >= 0)
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Try to force the columns to be the correct class
verify(!is.factor(area)) %>%
mutate(start = as.POSIXct(start),
end = as.POSIXct(end),
area = as.numeric(area)) %>%
verify(area >= 0,
start > 0)
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Try to force the columns to be the correct class
verify(!is.factor(area)) %>%
mutate(start = as.POSIXct(start),
end = as.POSIXct(end),
area = as.numeric(area)) %>%
verify(area >= 0) %>%
verify()         start > 0)
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Try to force the columns to be the correct class
verify(!is.factor(area)) %>%
mutate(start = as.POSIXct(start),
end = as.POSIXct(end),
area = as.numeric(area)) %>%
verify(area >= 0) %>%
verify(        start > 0)
# for deploy
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Try to force the columns to be the correct class
verify(!is.factor(area)) %>%
mutate(start = as.POSIXct(start),
end = as.POSIXct(end),
area = as.numeric(area)) %>%
verify(area >= 0) %>%
verify(lubridate::tz(start) == lubridate::tz(end) )
lubridate::tz(deploy$start)
library(lubridate)
install.packages("stringi")
