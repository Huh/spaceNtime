rename(occ_int = int) %>% #.02s
left_join(., deploy, by = "cam") %>% # 2s
filter(lubridate::int_overlaps(occ_int, int) )
Sys.time()-s
s<- Sys.time()
effort <- occ_by_cam %>%
rename(occ_int = int) %>% #.02s
left_join(., deploy, by = "cam") %>% # 2s
filter(lubridate::int_overlaps(occ_int, int) ) %>% #5s
select(occ, cam, area) %>% # 5s
left_join(occ_by_cam, ., by = c("occ", "cam"))
Sys.time()-s
s<- Sys.time()
effort <- occ_by_cam %>%
rename(occ_int = int) %>% #.02s
left_join(., deploy, by = "cam") %>% # 2s
filter(lubridate::int_overlaps(occ_int, int) ) %>% #5s
select(occ, cam, area) %>% # 5s
left_join(occ_by_cam, ., by = c("occ", "cam")) %>% #18s #### big time suck
mutate(area = replace(area, is.na(area), 0)) %>% #19s
# get rid of duplicate rows (if area changed during occasion)
distinct(occ, cam, .keep_all = T)
Sys.time()-s
s<- Sys.time()
effort <- occ_by_cam %>%
rename(occ_int = int) %>% #.02s
left_join(., deploy, by = "cam") %>% # 2s
filter(lubridate::int_overlaps(occ_int, int) ) %>% #5s
select(occ, cam, area) %>% # 5s
left_join(occ_by_cam, ., by = c("occ", "cam")) %>% #18s #### big time suck
mutate(area = replace(area, is.na(area), 0)) %>% #19s
# get rid of duplicate rows (if area changed during occasion)
distinct(occ, cam, .keep_all = T)%>% #23s
ungroup()
Sys.time()-s
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
# Speed up model using real data
# Anna Moeller
# 7/1/2020
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
# Problem 1. speed up effort_fn.
# Problem is in group_by and summarize to get rid of multiple rows
# I want to fix the problem by getting rid of the second row.
# # play with deploy to debug
# deploy <- tibble::tibble(
#   cam = c("AM174", "AM174"),
#   start = as.POSIXct(c("2016-01-06 17:00:00", "2016-01-08 17:00:02"), tz = "GMT"),
#   # end = "2016-01-08 17:00:01", "2016-01-10 18:00:00" ), tz = "GMT"),
#   area = c(250, 100)
# )
### How to pick up tomorrow
# Clean up ste_calc_toevent with new rounding
# potentially make rounding its own function
# run the package and see if it works
# think about changing all intervals to rounding instead.
ste_eh <- ste_build_eh(df, deploy, occ)
devtools::load_all(".")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
# Problem 1. speed up effort_fn.
# Problem is in group_by and summarize to get rid of multiple rows
# I want to fix the problem by getting rid of the second row.
# # play with deploy to debug
# deploy <- tibble::tibble(
#   cam = c("AM174", "AM174"),
#   start = as.POSIXct(c("2016-01-06 17:00:00", "2016-01-08 17:00:02"), tz = "GMT"),
#   # end = "2016-01-08 17:00:01", "2016-01-10 18:00:00" ), tz = "GMT"),
#   area = c(250, 100)
# )
### How to pick up tomorrow
# Clean up ste_calc_toevent with new rounding
# potentially make rounding its own function
# run the package and see if it works
# think about changing all intervals to rounding instead.
ste_eh <- ste_build_eh(df, deploy, occ)
s <- Sys.time()
df <- validate_df(df)
Sys.time()-s
s <- Sys.time()
deploy <- validate_deploy(deploy)
Sys.time()-s
s <- Sys.time()
occ <- validate_occ(occ)
Sys.time()-s
s <- Sys.time()
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
Sys.time()-s
s <- Sys.time()
validate_df_deploy(df_s, deploy_s)
Sys.time()-s
df<-df_x
df<-df_s
deploy<-deploy_s
s <- Sys.time()
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int)
Sys.time()-s
s <- Sys.time()
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int)%>%
left_join(df, ., by = "cam")
Sys.time()-s
s <- Sys.time()
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int)%>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int))
Sys.time()-s
s <- Sys.time()
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int)%>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int))%>%
mutate(exist = datetime %within% chk)
Sys.time()-s
head(deploy)
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int))
head(pic_in_deploy)
occ %>%
mutate(d = as.numeric(difftime(start, lag(start), units = "secs")),
m = min(d, na.rm = T),
r = d %% m)
# New function to find samp_freq
# Calculate the lowest common denominator for samp_freq
t <- occ %>%
mutate(d = as.numeric(difftime(start, lag(start), units = "secs")),
m = min(d, na.rm = T),
r = d %% m)
head(t)
any(t$r > 0, na.rm = T)
# New function to find samp_freq
# Calculate the lowest common denominator for samp_freq
lcd <- function(occ){
t <- occ %>%
mutate(d = as.numeric(difftime(start, lag(start), units = "secs")),
m = min(d, na.rm = T),
r = d %% m)
if(any(t$r > 0, na.rm = T)){
return(0)
} else {
return(t$m[1])
}
}
lcd(occ)
head(occ)
x <- occ
str(x)
x[1,2] <- as.POSIXct("2016-01-01 00:00:02")
head(x)
lcd(occ)
x[2,2] <- as.POSIXct("2016-01-01 00:00:32")
head(x)
lcd(x)
# New function to find samp_freq
# Calculate the lowest common denominator for samp_freq
lcd <- function(occ){
t <- occ %>%
mutate(d = as.numeric(difftime(start, lag(start), units = "secs")),
m = min(d, na.rm = T),
r = d %% m)
if(any(t$r != 0, na.rm = T)){
return(0)
} else {
return(t$m[1])
}
}
lcd(x)
x<-occ
x[1,2] <- as.POSIXct("2016-01-01 00:00:02")
lcd(x)
lcd(occ)
library(roxygen2)
devtools::load_all(".")
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
lcd(occ)
# Fail if a camera took a photo but that time is not in deploy
# Very similar function to find_overlap. Work on that in future
step1 <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int))
head(step1)
step1 <- deploy %>%
add_int(.)
head(step1)
step1 <- deploy %>%
add_int(.) %>%
select(cam, int)
head(step1)
step1 <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam")
head(step1)
# Fail if a camera took a photo but that time is not in deploy
# Very similar function to find_overlap. Work on that in future
step1 <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int))
head(step1)
head(deploy)
head(df)
head(deploy)
pic_in_deploy <- left_join(df, deploy)
head(pic_in_deploy)
pic_in_deploy <- left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end)
head(pic_in_deploy)
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int)) %>%
mutate(exist = datetime %within% chk) %>% ## This is the longest step.
select(-chk) %>%
summarise(allgood = any(exist)) %>%
filter(allgood == F | is.na(allgood))
pic_in_deploy
pic_in_deploy <- left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end)
pic_in_deploy
pic_in_deploy <- left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
summarise(allgood = any(exist)) %>%
filter(allgood == F | is.na(allgood))
pic_in_deploy <- deploy %>%
add_int(.) %>%
select(cam, int) %>%
left_join(df, ., by = "cam") %>%
group_by(cam) %>%
mutate(chk = list(int)) %>%
mutate(exist = datetime %within% chk)
head(pic_in_deploy)
head(pic_in_deploy)%>%as.data.frame()
head(pic_in_deploy)%>%as.data.frame()%>%head
left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end)%>%head
left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
summarise(allgood = any(wthn))%>%head
left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
group_by(cam) %>%
summarise(allgood = any(wthn))%>%head
left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
group_by(cam) %>%
summarise(allgood = any(wthn)) %>%
filter(allgood == F | is.na(allgood))
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s, lcd) # This one is weird because it doesn't return anything if all good...
devtools::load_all(".")
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
df<-df_s
deploy<-deploy_s
# # Fail if a camera in df is not in deploy
stopifnot(class(df$cam) == class(deploy$cam))
stopifnot(all(unique(df$cam) %in% deploy$cam) )
# Fail if a camera took a photo but that time is not in deploy
# Very similar function to find_overlap. Work on that in future
pic_in_deploy <- left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
group_by(cam) %>%
summarise(allgood = any(wthn)) %>%
filter(allgood == F | is.na(allgood))
pic_in_deploy
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
# Fail if a camera took a photo but that time is not in deploy
# Very similar function to find_overlap. Work on that in future
pic_in_deploy <- left_join(df, deploy) %>%
mutate(wthn = datetime >= start & datetime <= end) %>%
group_by(cam) %>%
summarise(allgood = any(wthn)) %>%
filter(allgood == F | is.na(allgood))
pic_in_deploy
nrow(pic_in_deploy) > 0)
nrow(pic_in_deploy) > 0
validate_df_deploy(df, deploy)
?lcd_fn
devtools::load_all(".")
?lcd_fn
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ)
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 00:00:01", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 30,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
un devtools::install_github("annam21/spaceNtime@calctoevent", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
devtools::install_github("annam21/spaceNtime@calctoevent", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
